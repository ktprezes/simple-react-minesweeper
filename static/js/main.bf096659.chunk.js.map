{"version":3,"sources":["GameConst.js","FlagsCounter.js","ResetBtn.js","Timer.js","ControlPanel.js","CellClass.js","images/bomb1.svg","images/boom1.svg","Cell.js","Row.js","Field.js","FieldClass.js","images/bomb.svg","LogoArea.js","Game.js","index.js"],"names":["GameConst","noOfBombs","rows","cols","secPerMinute","FlagsCounter","props","bombs","marked","className","String","padStart","split","join","ResetBtn","type","Timer","useState","timeElapsed","Math","floor","ControlPanel","cellStates","CellClass","hasBomb","cellState","this","bomb","state","includes","bombsAround","Cell","rowNo","Number","r","colNo","c","cell","cellObj","myCellClickHandler","cellContent","auxCellClass","bombImg","src","alt","data-r","data-c","boomImg","boom","bombsCount","toString","cellClass","onClick","onContextMenu","Row","cells","Array","keys","map","no","cellRow","Field","cellArr","FieldClass","fill","count","i","j","countBombs","random","row","col","countBombsAround","LogoArea","logo","myField","field","fillWithBombs","calculateBombsAroundAllCells","createFieldWithBombs","Game","JSON","parse","stringify","setCellArr","e","preventDefault","countCellsWithState","console","log","target","dataset","which","button","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf096659.chunk.js","sourcesContent":["// MineSweeper game constants\r\n\r\nconst GameConst = {\r\n    noOfBombs: 10,\r\n    rows: 9,\r\n    cols: 8,\r\n    secPerMinute: 60,\r\n} // const GameConst\r\n\r\nexport default GameConst;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport './styles/FlagsCounter.css';\r\n\r\nfunction FlagsCounter(props) {\r\n    let bombs = props.marked;\r\n\r\n    // add some spaces between digits of the counter\r\n    return (\r\n        <div className=\"flagsCounter\">\r\n            {String(bombs).padStart(3,'0').split('').join(' ')}\r\n        </div>\r\n    ); /*return() of function FlagsCounter()*/\r\n}/* function FlagsCounter()*/\r\n\r\nFlagsCounter.propTypes = {\r\n    marked: PropTypes.number.isRequired\r\n}\r\n\r\nexport default FlagsCounter;\r\n","import React, {useState} from \"react\";\r\nimport './styles/ResetBtn.css';\r\n\r\nfunction ResetBtn() {\r\n    return (\r\n        <button type=\"button\" className=\"resetBtn\">New</button>\r\n    ); /*return() of function ResetBtn()*/\r\n}/* function ResetBtn()*/\r\n\r\nexport default ResetBtn;\r\n","import React, {useState} from \"react\";\r\nimport GameConst from \"./GameConst\";\r\nimport './styles/Timer.css';\r\n\r\n\r\nfunction Timer() {\r\n    const [timeElapsed, setTimeElapsed] = useState(0);\r\n    /* this is my version of timer inside the <div> tag:\r\n        {Math.floor(timeElapsed/GameConst.secPerMinute)}<span>:</span>{String(timeElapsed % GameConst.secPerMinute).padStart(2,'0')}\r\n       but this doesn't pass the JBA tests\r\n    */\r\n\r\n    return (\r\n        <div className=\"timer\">\r\n            {Math.floor(timeElapsed/GameConst.secPerMinute)}<span>:</span>{String(timeElapsed % GameConst.secPerMinute).padStart(2,'0')}\r\n        </div>\r\n    ); /*return() of function Timer()*/\r\n}/* function Timer()*/\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport FlagsCounter from './FlagsCounter';\r\nimport ResetBtn from './ResetBtn';\r\nimport Timer from './Timer';\r\nimport './styles/ControlPanel.css';\r\n\r\nfunction ControlPanel(props) {\r\n    return (\r\n        <header className=\"ControlPanel\">\r\n            <FlagsCounter marked={props.marked}/>\r\n            <ResetBtn />\r\n            <Timer />\r\n        </header>\r\n    ); /*return() of function ControlPanel()*/\r\n}/* function ControlPanel()*/\r\n\r\nControlPanel.propTypes = {\r\n    marked: PropTypes.number.isRequired\r\n}\r\n\r\nexport default ControlPanel;\r\n","\r\n// --------------------------------------------------------\r\n// definition of 'CellClass' - the 'prototype' of objects\r\n// in the 'field' array and the 'backend' of 'Cell' components\r\n\r\nexport const cellStates = ['closed', 'open', 'marked'];\r\n\r\nclass CellClass {\r\n    constructor(hasBomb = false, cellState = 'closed') {\r\n        this.bomb = !!hasBomb;\r\n        this.state = cellStates.includes(cellState) ? cellState : 'closed';\r\n        this.bombsAround = 0; // it will be set after creating the whole board\r\n    } // class CellClass constructor\r\n} // class CellClass {\r\n\r\nexport default CellClass;\r\n","export default __webpack_public_path__ + \"static/media/bomb1.dab46aa2.svg\";","export default __webpack_public_path__ + \"static/media/boom1.4d436099.svg\";","import React from \"react\";\r\nimport CellClass from \"./CellClass\";\r\nimport PropTypes from 'prop-types';\r\nimport bomb from \"./images/bomb1.svg\";\r\nimport boom from \"./images/boom1.svg\";\r\nimport './styles/Cell.css';\r\n\r\n\r\n// --------------------------------------------------------\r\n// definition of 'Cell' react component\r\n// visual representation of 'CellClass' objects\r\n\r\nexport const Cell = (props) => {\r\n\r\n    const rowNo = Number(props.r);\r\n    const colNo = Number(props.c);\r\n    const cell  = props.cellObj;\r\n    const myCellClickHandler = props.myCellClickHandler;\r\n    let cellContent = '';\r\n    let auxCellClass = '';\r\n\r\n    // non-empty Cell components (with bombImg/boomImg or bombsCount inside), when clicked,\r\n    // pass to the event handler as 'e.target' the child element (<img..> / <p>)\r\n    // NOT their own element value ( the <div className={cellClass}.. />)\r\n    // therefore the child elements need the dataset values ('data-r' and 'data-c') too,\r\n    // for the event handler to work properly\r\n    const bombImg = <img src={bomb} className=\"bomb-img\" alt=\"bomb\" data-r={rowNo} data-c={colNo} />;\r\n    const boomImg = <img src={boom} className=\"boom-img\" alt=\"boom\" data-r={rowNo} data-c={colNo} />;\r\n    const bombsCount = <p data-r={rowNo} data-c={colNo} >{cell.bombsAround.toString()}</p>;\r\n    // console.log(rowNo, colNo, cell, typeof cell.bomb, typeof cell.state);\r\n\r\n    if (cell.state === 'marked') {\r\n        cellContent = bombImg;\r\n        auxCellClass = 'marked';\r\n    } else if (cell.state === 'open' && cell.bomb) {\r\n        cellContent = boomImg;\r\n        auxCellClass = 'open boom';\r\n    } else if (cell.state === 'open' && !cell.bomb) {\r\n        cellContent = cell.bombsAround === 0 ? '' : bombsCount;\r\n        auxCellClass = 'open empty';\r\n    } else { // default 'closed' state is here, too...\r\n        cellContent = '';\r\n        auxCellClass = 'closed';\r\n    }\r\n    let cellClass = 'cell ' + auxCellClass;\r\n\r\n    // console.log(cellClass);\r\n\r\n    // the 'data-xxx' attributes are available withing event handler function as 'dataset keys',\r\n    //  e.g.: 'data-r' can be accessed within the event handler function\r\n    // as e.target.dataset.r\r\n    return (\r\n        <div className={cellClass}\r\n             data-r={rowNo}\r\n             data-c={colNo}\r\n             onClick={myCellClickHandler}\r\n             onContextMenu={myCellClickHandler}\r\n        >\r\n            {cellContent}\r\n        </div>\r\n    ); // return() of Cell() function\r\n} // function Cell()\r\n\r\nCell.propTypes = {\r\n    r: PropTypes.string.isRequired,\r\n    c: PropTypes.string.isRequired,\r\n    cellObj: PropTypes.instanceOf(CellClass).isRequired,\r\n    myCellClickHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Cell;\r\n\r\n\r\n/*\r\ncell - possible states:\r\n\r\n(initial state)\r\n   'closed'  <-- Right Click -->  'marked'\r\n class: closed                  class: marked\r\n       \\                          /\r\n        \\                        /\r\n   (left click)           (left click)\r\n          \\                   /\r\n           V                 V\r\n              has bomb  ???\r\n             /           \\\r\n           YES           NO\r\n          /               \\\r\n         V                V\r\n  'open' + bomb       'open' without bomb\r\nclass: 'open boom'    class: 'open empty'\r\n */\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport GameConst from \"./GameConst\";\r\nimport Cell from './Cell';\r\nimport CellClass from \"./CellClass\";\r\nimport './styles/Row.css';\r\n\r\n\r\nfunction Row (props) {\r\n    const rowNo = props.r;\r\n    const colNumbers = [...Array(GameConst.cols).keys()];\r\n    const cells = colNumbers.map(\r\n      (no) => {\r\n        let colNo = no.toString();\r\n/*\r\n        // create random 'CellClass' object - code used for testing purposes\r\n        // requires the 'cellStates' to be imported from the \"./CellClass\" file\r\n        let cellObj = new CellClass(\r\n            Math.floor(Math.random() * 2),\r\n            cellStates[Math.floor(Math.random() * cellStates.length)]\r\n        );\r\n*/\r\n        //console.log(rowNo, colNo, cellObj);\r\n        return <Cell key={'r' + rowNo + 'c' + colNo}\r\n                     r={rowNo}\r\n                     c={colNo}\r\n                     cellObj={props.cellRow[no]}\r\n                     myCellClickHandler={props.myCellClickHandler}\r\n               />\r\n      }\r\n    ); // const cells = colNumbers.map(\r\n\r\n    return (\r\n        <div className=\"Row\" r={rowNo}>\r\n            {cells}\r\n        </div>\r\n    ); /*return() of function Row()*/\r\n}/* function Row()*/\r\n\r\n\r\nRow.propTypes = {\r\n  r: PropTypes.string.isRequired,\r\n  cellRow: PropTypes.arrayOf(PropTypes.instanceOf(CellClass)).isRequired,\r\n  myCellClickHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport GameConst from \"./GameConst\";\r\nimport CellClass from \"./CellClass\";\r\nimport Row from './Row';\r\nimport './styles/Field.css';\r\n\r\nfunction Field(props) {\r\n    const rowNumbers = [...Array(GameConst.rows).keys()];\r\n\r\n    const rows = rowNumbers.map((no) => {\r\n        let rowNo = no.toString();\r\n        return <Row key={'r'+rowNo}\r\n                    r={rowNo}\r\n                    cellRow={props.cellArr[no]}\r\n                    myCellClickHandler={props.myCellClickHandler}\r\n                />\r\n    });\r\n\r\n\r\n    return (\r\n        <main className=\"Field\">\r\n            {rows}\r\n        </main>\r\n    ); /*return() of function Field()*/\r\n}/* function Field()*/\r\n\r\nField.propTypes = {\r\n    cellArr: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.instanceOf(CellClass))).isRequired,\r\n    myCellClickHandler: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default Field;\r\n\r\n","import CellClass, {cellStates} from \"./CellClass\";\r\n\r\n// --------------------------------------------------------\r\n// definition of 'FieldClass' - the 'prototype' of the 'field'\r\n// object which is a 2d-array[rows][cols] of 'CellClass' objects\r\n// and the 'backend' of the 'Field' component - it represents\r\n// the main board of the minesweeper game\r\n\r\nclass FieldClass {\r\n\r\n    constructor(rows, cols) {\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n\r\n        // create the 2d-array[rows][cols] of CellClass objects\r\n        // with default values - without 'bomb' and with 'closed' state\r\n        // it must NOT be done that way:\r\n        //      Array(rows).fill(Array(cols).fill(new CellClass()));\r\n        // because in that case all rows would be filled\r\n        // with the reference to _the_same_ row of cells\r\n        // therefore it must be done as below:\r\n        this.cells = new Array(rows).fill(null).map(\r\n            () => Array(cols).fill(null).map(() => new CellClass(false, 'closed'))\r\n        );\r\n    }; // constructor(rows, cols) {\r\n\r\n\r\n    // count number of 'cells' in the 'field' array\r\n    // with 'bomb' set to 'true'\r\n    countBombs() {\r\n        if (!this.cells) return 0;\r\n\r\n//        let arr = this.cells;\r\n        let count = 0;\r\n        for (let i = 0; i < this.rows; i++) {\r\n            for (let j = 0; j < this.cols; j++) {\r\n                if (this.cells[i][j].bomb === true) {\r\n                    count++;\r\n                }\r\n            } // for (let j...)\r\n        } // for (let i...)\r\n\r\n        return count;\r\n    }; // const countBombs () {\r\n\r\n\r\n    // place randomly 'noOfBombs' somewhere on the 'field'\r\n    fillWithBombs (noOfBombs) {\r\n        if (!this.cells || !noOfBombs) return false;\r\n        if (typeof noOfBombs !== 'number') return false;\r\n        if (noOfBombs !== Math.floor(noOfBombs)) return false;\r\n        if (noOfBombs < 1 || noOfBombs > this.rows * this.cols) return false;\r\n\r\n        // 'while' loop instead of 'for' to maintain cases,\r\n        // when 'random' hits the same cell multiple times\r\n        while (this.countBombs() < noOfBombs) {\r\n            let r = Math.floor(Math.random() * this.rows);\r\n            let c = Math.floor(Math.random() * this.cols);\r\n            this.cells[r][c].bomb = true;\r\n        };\r\n        return true;\r\n    }; // fillWithBombs (noOfBombs) {\r\n\r\n\r\n    // for the cell[row][col] count the number\r\n    // of 'bombs' in the neighborhood\r\n    countBombsAround(row, col) {\r\n        if (!this.cells) return 0;\r\n        if (typeof row !== 'number' || typeof col !== 'number') return 0;\r\n        if (row !== Math.floor(row) || col !== Math.floor(col)) return 0;\r\n        if (row < 0 || row >= this.rows) return 0;\r\n        if (col < 0 || col >= this.cols) return 0;\r\n\r\n        let count = 0;\r\n\r\n        // don't take into account indices outside of 'cells' array boundaries\r\n        for (let r = (row - 1 < 0 ? 0 : row - 1); r <= (row + 1 >= this.rows ? this.rows - 1 : row + 1); r++) {\r\n            for (let c = (col - 1 < 0 ? 0 : col - 1); c <= (col + 1 >= this.cols ? this.cols - 1 : col + 1); c++) {\r\n                // don't take into account the cell we count the neighborhood for\r\n                if (r === row && c === col) {\r\n                    continue;\r\n                }\r\n                if (this.cells[r][c].bomb) {\r\n                    count++;\r\n                }\r\n            } // for (let c = ...)\r\n        } // for (let r = ...)\r\n\r\n        return count;\r\n    } // countBombsAround(row, col) {\r\n\r\n\r\n    // update 'bombsAround' property for all cells in the field\r\n    calculateBombsAroundAllCells() {\r\n        if (!this.cells) return;\r\n        for (let r = 0; r < this.rows; r++) {\r\n            for (let c = 0; c < this.cols; c++) {\r\n                this.cells[r][c].bombsAround = this.countBombsAround(r, c);\r\n            } // for (let c...)\r\n        } // for (let r...)\r\n    } //calculateBombsAroundAllCells() {\r\n\r\n\r\n    // count number of cells in the field with given 'state'\r\n    // possible state values: cellStates = ['closed', 'open', 'marked'];\r\n    countCellsWithState(state){\r\n        if (!this.cells) return 0;\r\n        if (!state || !cellStates.includes(state)) return 0;\r\n\r\n        let count = 0;\r\n        for (let r = 0; r < this.rows; r++) {\r\n            for (let c = 0; c < this.cols; c++) {\r\n                if (this.cells[r][c].state === state) {\r\n                    count++;\r\n                }\r\n            } // for (let j...)\r\n        } // for (let i...)\r\n\r\n        return count;\r\n    } // countCellsWithState(state){\r\n\r\n} // class FieldClass {\r\n\r\n\r\nexport function createFieldWithBombs(rows, cols, noOfBombs) {\r\n    let field = new FieldClass(rows, cols);\r\n    if (field) {\r\n        field.fillWithBombs(noOfBombs);\r\n        field.calculateBombsAroundAllCells();\r\n    }\r\n    return field\r\n}\r\n\r\nexport default FieldClass;\r\n\r\n","export default __webpack_public_path__ + \"static/media/bomb.50cb791f.svg\";","import React from \"react\";\r\nimport './styles/LogoArea.css';\r\nimport logo from \"./images/bomb.svg\";\r\n\r\nfunction LogoArea() {\r\n    return (\r\n        <footer className=\"logoArea\">\r\n            <p>&nbsp;&nbsp;&nbsp;M I N E<br />SWEEPER</p>\r\n            <img src={logo} className=\"appLogo\" alt=\"logo\" />\r\n        </footer>\r\n    ); /*return() of function LogoArea()*/\r\n}/* function LogoArea()*/\r\n\r\nexport default LogoArea;\r\n","import React, {useState} from \"react\";\r\nimport GameConst from \"./GameConst\";\r\nimport ControlPanel from './ControlPanel';\r\nimport Field from \"./Field\";\r\nimport {createFieldWithBombs} from \"./FieldClass\";\r\n\r\nimport LogoArea from \"./LogoArea\";\r\nimport './styles/Game.css';\r\n\r\nconst myField = createFieldWithBombs(\r\n    GameConst.rows, GameConst.cols, GameConst.noOfBombs\r\n);\r\nconst Game = () => {\r\n\r\n    // const [cellArr, setCellArr] = useState([...myField.cells]);\r\n\r\n    // to properly handle the 'state', we need the deep copy of 'myField.cells'\r\n    // (the deeper one then the spread/'...' operator provides)\r\n    const [cellArr, setCellArr] = useState(JSON.parse(JSON.stringify(myField.cells)));\r\n\r\n    const handleCellClicks = (e) => {\r\n        console.log(e.target);\r\n        console.log(e.target.dataset);\r\n        let row = Number(e.target.dataset.r);\r\n        let col = Number(e.target.dataset.c);\r\n\r\n        // handle 'left mouse button' - 'onClick' event\r\n        if (e.which === 1 || e.button === 0) {\r\n            // console.log('Left mouse button at ' + e.clientX + 'x' + e.clientY);\r\n            if (cellArr[row][col].state !== 'open') {\r\n                console.log('[',row,',',col,']: !open -> open');\r\n                myField.cells[row][col].state = 'open';\r\n                // setCellArr([...myField.cells]);\r\n                setCellArr(JSON.parse(JSON.stringify(myField.cells)));\r\n            }\r\n        } // end of handle 'left mouse button'\r\n\r\n        // handle 'right mouse button' - 'onContextMenu' event\r\n        if (e.which === 3 || e.button === 2) {\r\n            // console.log('Right mouse button at ' + e.clientX + 'x' + e.clientY);\r\n            if (cellArr[row][col].state === 'closed') {\r\n                console.log('[',row,',',col,']: closed -> marked');\r\n                myField.cells[row][col].state = 'marked';\r\n                // setCellArr([...myField.cells]);\r\n                setCellArr(JSON.parse(JSON.stringify(myField.cells)));\r\n            } else if (cellArr[row][col].state === 'marked') {\r\n                console.log('[',row,',',col,']: marked -> closed');\r\n                myField.cells[row][col].state = 'closed';\r\n                // setCellArr([...myField.cells]);\r\n                setCellArr(JSON.parse(JSON.stringify(myField.cells)));\r\n            }\r\n        } // end of handle 'right mouse button'\r\n    } // const handleCellClicks = (e) => {\r\n\r\n\r\n    return (\r\n        <div className=\"minesweepergame\"\r\n             onContextMenu={(e) => e.preventDefault()}\r\n        >\r\n            <ControlPanel marked={myField.countCellsWithState('marked')}/>\r\n            <Field cellArr={cellArr} myCellClickHandler={handleCellClicks}/>\r\n            <LogoArea/>\r\n        </div>\r\n    ); // return() of function Game()\r\n}; // Game()\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from \"./Game\";\nimport './styles/index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}