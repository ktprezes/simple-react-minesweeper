{"version":3,"sources":["GameConst.js","FlagsCounter.js","ResetBtn.js","Timer.js","ControlPanel.js","CellClass.js","images/bomb1.svg","images/boom1.svg","Cell.js","Row.js","Field.js","FieldClass.js","Arr2dClass.js","images/bomb.svg","LogoArea.js","Game.js","index.js"],"names":["GameConst","noOfBombs","rows","cols","secPerMinute","gameStates","gameStateMsg","FlagsCounter","props","count","marked","className","String","padStart","split","join","ResetBtn","type","onClick","myResetBtnClickHandler","Timer","timeElapsed","Math","floor","ControlPanel","cellStates","CellClass","hasBomb","cellState","this","bomb","state","includes","bombsAround","Cell","rowNo","Number","r","colNo","c","cell","cellObj","myCellClickHandler","cellContent","auxCellClass","bombImg","src","alt","data-r","data-c","boomImg","boom","bombsCount","toString","cellClass","onContextMenu","Row","cells","Array","keys","map","no","cellRow","Field","cellArr","gameState","msg","msgElemClass","msgElem","FieldClass","undefined","Error","checkNoOfBombsParam","fillWithBombs","calculateBombsAroundAllCells","arr","initArr","i","j","isSafeInteger","countBombs","random","row","col","isRowColInRange","cellsAroundIndexes","adjacency8IndexesList","length","filter","idx","countBombsAround","markedCellsWithBombsCounter","forEach","msgBegin","TypeError","RangeError","elementClass","Arr2dClass","checkRowsColsParams","checkElementClassParam","elementClassArgs","fill","v1","v2","isRowInRange","isColInRange","elem","isArray","elemJson","JSON","stringify","push","parse","wrapIndexes","indexes","addIfNotIncluded","shift","sort","adjacency4IndexesList","unshift","LogoArea","logo","myField","intervalID","Game","useState","setGameState","markedCellsCount","setMarkedCellsCount","secondsElapsed","setSecondsElapsed","myFieldArrStringify","setCellArr","useEffect","resetField","clearInterval","setInterval","updateSecondsElapsed","prevSecondsElapsed","e","preventDefault","which","button","target","dataset","cellArrStateShouldUpdate","isWinConditionSatisfied","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84822531.chunk.js","sourcesContent":["// MineSweeper game constants\r\n\r\nconst GameConst = {\r\n    noOfBombs: 10,\r\n    rows: 9,\r\n    cols: 8,\r\n    secPerMinute: 60,\r\n    gameStates: ['init', 'action', 'defeat', 'victory'],\r\n    gameStateMsg: {\r\n        'init':    '',\r\n        'action':  '',\r\n        'defeat':  'YOU LOST',\r\n        'victory': 'YOU WIN'\r\n    }\r\n} // const GameConst\r\n\r\nexport default GameConst;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport './styles/FlagsCounter.css';\r\n\r\nfunction FlagsCounter(props) {\r\n    let count = props.marked;\r\n\r\n    // add some spaces between digits of the counter\r\n    return (\r\n        <div className=\"flagsCounter\">\r\n            {String(count).padStart(3,'0').split('').join(' ')}\r\n        </div>\r\n    ); /*return() of function FlagsCounter()*/\r\n}/* function FlagsCounter()*/\r\n\r\nFlagsCounter.propTypes = {\r\n    marked: PropTypes.number.isRequired\r\n}\r\n\r\nexport default FlagsCounter;\r\n","import React from \"react\";\r\nimport './styles/ResetBtn.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ResetBtn(props) {\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            className=\"resetBtn\"\r\n            onClick={props.myResetBtnClickHandler}\r\n        >New</button>\r\n    ); /*return() of function ResetBtn()*/\r\n}/* function ResetBtn()*/\r\n\r\n\r\nResetBtn.propTypes = {\r\n    myResetBtnClickHandler: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default ResetBtn;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport GameConst from \"./GameConst\";\r\nimport './styles/Timer.css';\r\n\r\n\r\nfunction Timer(props) {\r\n    let timeElapsed = props.timeElapsed;\r\n        /* this is my version of timer inside the <div> tag:\r\n            {Math.floor(timeElapsed/GameConst.secPerMinute)}<span>:</span>{String(timeElapsed % GameConst.secPerMinute).padStart(2,'0')}\r\n           but this doesn't pass the JBA tests\r\n        */\r\n\r\n    return (\r\n        <div className=\"timer\">\r\n            {Math.floor(timeElapsed/GameConst.secPerMinute)}<span>:</span>{String(timeElapsed % GameConst.secPerMinute).padStart(2,'0')}\r\n        </div>\r\n    ); /*return() of function Timer()*/\r\n}/* function Timer()*/\r\n\r\n\r\nTimer.propTypes = {\r\n    timeElapsed: PropTypes.number.isRequired\r\n}\r\n\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport FlagsCounter from './FlagsCounter';\r\nimport ResetBtn from './ResetBtn';\r\nimport Timer from './Timer';\r\nimport './styles/ControlPanel.css';\r\n\r\nfunction ControlPanel(props) {\r\n    return (\r\n        <header className=\"ControlPanel\">\r\n            <FlagsCounter marked={props.marked}/>\r\n            <ResetBtn myResetBtnClickHandler={props.myResetBtnClickHandler} />\r\n            <Timer timeElapsed={props.timeElapsed}/>\r\n        </header>\r\n    ); /*return() of function ControlPanel()*/\r\n}/* function ControlPanel()*/\r\n\r\nControlPanel.propTypes = {\r\n    marked: PropTypes.number.isRequired,\r\n    timeElapsed: PropTypes.number.isRequired,\r\n    myResetBtnClickHandler: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ControlPanel;\r\n","\r\n// --------------------------------------------------------\r\n// definition of 'CellClass' - the 'prototype' of objects\r\n// in the 'field' array and the 'backend' of 'Cell' components\r\n\r\nexport const cellStates = ['closed', 'open', 'marked'];\r\n\r\nclass CellClass {\r\n    constructor(hasBomb = false, cellState = 'closed') {\r\n        // just for debug purposes\r\n        // console.log('CellClass: ', hasBomb, cellState);\r\n        this.bomb = !!hasBomb;\r\n        this.state = cellStates.includes(cellState) ? cellState : 'closed';\r\n        this.bombsAround = 0; // it will be set after creating the whole board\r\n    } // class CellClass constructor\r\n} // class CellClass {\r\n\r\nexport default CellClass;\r\n","export default __webpack_public_path__ + \"static/media/bomb1.dab46aa2.svg\";","export default __webpack_public_path__ + \"static/media/boom1.4d436099.svg\";","import React from \"react\";\r\nimport CellClass from \"./CellClass\";\r\nimport PropTypes from 'prop-types';\r\nimport bomb from \"./images/bomb1.svg\";\r\nimport boom from \"./images/boom1.svg\";\r\nimport './styles/Cell.css';\r\n\r\n\r\n// --------------------------------------------------------\r\n// definition of 'Cell' react component\r\n// visual representation of 'CellClass' objects\r\n\r\nexport const Cell = (props) => {\r\n\r\n    const rowNo = Number(props.r);\r\n    const colNo = Number(props.c);\r\n    const cell  = props.cellObj;\r\n    const myCellClickHandler = props.myCellClickHandler;\r\n    let cellContent = '';\r\n    let auxCellClass = '';\r\n\r\n    // non-empty Cell components (with bombImg/boomImg or bombsCount inside), when clicked,\r\n    // pass to the event handler as 'e.target' the child element (<img..> / <p>)\r\n    // NOT their own element value ( the <div className={cellClass}.. />)\r\n    // therefore the child elements need the dataset values ('data-r' and 'data-c') too,\r\n    // for the event handler to work properly\r\n    const bombImg = <img src={bomb} className=\"bomb-img\" alt=\"bomb\" data-r={rowNo} data-c={colNo} />;\r\n    const boomImg = <img src={boom} className=\"boom-img\" alt=\"boom\" data-r={rowNo} data-c={colNo} />;\r\n    const bombsCount = <p data-r={rowNo} data-c={colNo} >{cell.bombsAround.toString()}</p>;\r\n    // console.log(rowNo, colNo, cell, typeof cell.bomb, typeof cell.state);\r\n\r\n    if (cell.state === 'marked') {\r\n        cellContent = bombImg;\r\n        auxCellClass = 'marked';\r\n    } else if (cell.state === 'open' && cell.bomb) {\r\n        cellContent = boomImg;\r\n        auxCellClass = 'open boom';\r\n    } else if (cell.state === 'open' && !cell.bomb) {\r\n        cellContent = cell.bombsAround === 0 ? '' : bombsCount;\r\n        auxCellClass = 'open empty';\r\n    } else { // default 'closed' state is here, too...\r\n        cellContent = '';\r\n        auxCellClass = 'closed';\r\n    }\r\n    let cellClass = 'cell ' + auxCellClass;\r\n\r\n    // console.log(cellClass);\r\n\r\n    // the 'data-xxx' attributes are available withing event handler function as 'dataset keys',\r\n    //  e.g.: 'data-r' can be accessed within the event handler function\r\n    // as e.target.dataset.r\r\n    return (\r\n        <div className={cellClass}\r\n             data-r={rowNo}\r\n             data-c={colNo}\r\n             onClick={myCellClickHandler}\r\n             onContextMenu={myCellClickHandler}\r\n        >\r\n            {cellContent}\r\n        </div>\r\n    ); // return() of Cell() function\r\n} // function Cell()\r\n\r\nCell.propTypes = {\r\n    r: PropTypes.string.isRequired,\r\n    c: PropTypes.string.isRequired,\r\n    cellObj: PropTypes.instanceOf(CellClass).isRequired,\r\n    myCellClickHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Cell;\r\n\r\n\r\n/*\r\ncell - possible states:\r\n\r\n(initial state)\r\n   'closed'  <-- Right Click -->  'marked'\r\n class: closed                  class: marked\r\n       \\                          /\r\n        \\                        /\r\n   (left click)           (left click)\r\n          \\                   /\r\n           V                 V\r\n              has bomb  ???\r\n             /           \\\r\n           YES           NO\r\n          /               \\\r\n         V                V\r\n  'open' + bomb       'open' without bomb\r\nclass: 'open boom'    class: 'open empty'\r\n */\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport GameConst from \"./GameConst\";\r\nimport Cell from './Cell';\r\nimport CellClass from \"./CellClass\";\r\nimport './styles/Row.css';\r\n\r\n\r\nfunction Row (props) {\r\n    const rowNo = props.r;\r\n    const colNumbers = [...Array(GameConst.cols).keys()];\r\n    const cells = colNumbers.map(\r\n      (no) => {\r\n        let colNo = no.toString();\r\n/*\r\n        // create random 'CellClass' object - code used for testing purposes\r\n        // requires the 'cellStates' to be imported from the \"./CellClass\" file\r\n        let cellObj = new CellClass(\r\n            Math.floor(Math.random() * 2),\r\n            cellStates[Math.floor(Math.random() * cellStates.length)]\r\n        );\r\n*/\r\n        //console.log(rowNo, colNo, cellObj);\r\n        return <Cell key={'r' + rowNo + 'c' + colNo}\r\n                     r={rowNo}\r\n                     c={colNo}\r\n                     cellObj={props.cellRow[no]}\r\n                     myCellClickHandler={props.myCellClickHandler}\r\n               />\r\n      }\r\n    ); // const cells = colNumbers.map(\r\n\r\n    return (\r\n        <div className=\"Row\" r={rowNo}>\r\n            {cells}\r\n        </div>\r\n    ); /*return() of function Row()*/\r\n}/* function Row()*/\r\n\r\n\r\nRow.propTypes = {\r\n  r: PropTypes.string.isRequired,\r\n  cellRow: PropTypes.arrayOf(PropTypes.instanceOf(CellClass)).isRequired,\r\n  myCellClickHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport GameConst from \"./GameConst\";\r\nimport CellClass from \"./CellClass\";\r\nimport Row from './Row';\r\nimport './styles/Field.css';\r\n\r\nfunction Field(props) {\r\n    const rowNumbers = [...Array(GameConst.rows).keys()];\r\n\r\n    const rows = rowNumbers.map((no) => {\r\n        let rowNo = no.toString();\r\n        return <Row key={'r'+rowNo}\r\n                    r={rowNo}\r\n                    cellRow={props.cellArr[no]}\r\n                    myCellClickHandler={props.myCellClickHandler}\r\n                />\r\n    });\r\n\r\n\r\n    let gameState = props.gameState;\r\n    let msg = GameConst.gameStateMsg[gameState];\r\n    let msgElemClass = gameState === 'victory'\r\n        ? \"msg win\"\r\n        : gameState === 'defeat'\r\n            ? \"msg lost\"\r\n            : \"msg\";\r\n    let msgElem = msg ? <p className={msgElemClass}>{msg}</p> : '';\r\n    // console.log('Field Msg:', msg);\r\n\r\n    return (\r\n        <main className=\"Field\">\r\n            {rows}\r\n            {msgElem}\r\n        </main>\r\n    ); /*return() of function Field()*/\r\n}/* function Field()*/\r\n\r\nField.propTypes = {\r\n    cellArr: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.instanceOf(CellClass))).isRequired,\r\n    gameState: PropTypes.string.isRequired,\r\n    myCellClickHandler: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default Field;\r\n\r\n","import Arr2dClass from \"./Arr2dClass\";\r\nimport GameConst from \"./GameConst\";\r\nimport CellClass, {cellStates} from \"./CellClass\";\r\n\r\n// --------------------------------------------------------\r\n// definition of 'FieldClass' - the 'prototype' of the 'field'\r\n// object which is a 2d-array[rows][cols] of 'CellClass' objects\r\n// and the 'backend' of the 'Field' component - it represents\r\n// the main board of the minesweeper game\r\n\r\n\r\nclass FieldClass extends Arr2dClass {\r\n\r\n    constructor(rows, cols, noOfBombs) {\r\n        // check if the constructor war properly called\r\n        if (new.target === undefined)\r\n            throw new Error(\"FieldClass constructor: not called using the 'new' operator as it should be.\");\r\n\r\n        FieldClass.checkNoOfBombsParam(noOfBombs);\r\n\r\n        // 'super' inits fields: 'rows', 'cols', 'arr'\r\n        // the 'arr' is 2d-array[rows][cols] of 'CellClass' with\r\n        // default values: bomb: false, state: 'closed', 'bombsAround': 0\r\n        super(rows, cols, CellClass, false, 'closed');\r\n        // console.log('FieldClass Constructor before \"fill with bombs\":')\r\n        // console.log(JSON.stringify(this.arr));\r\n\r\n        this.noOfBombs = noOfBombs;\r\n\r\n        this.fillWithBombs(noOfBombs);\r\n        this.calculateBombsAroundAllCells();\r\n        // console.log(\"FieldClass Constructor: 'arr' after 'fill with bombs':\");\r\n        // console.log(JSON.stringify(this.arr));\r\n    }; // constructor(rows, cols) {\r\n\r\n\r\n    static checkNoOfBombsParam(noOfBombs, msgBegin = 'FieldClass constructor: ') {\r\n        if (!Number.isSafeInteger(noOfBombs))\r\n            throw new TypeError(`${msgBegin}'noOfBombs' should be non-negative integer value.`);\r\n        if (noOfBombs < 0)\r\n            throw new RangeError(`${msgBegin}'noOfBombs' should be non-negative integer value.`);\r\n\r\n        return true;\r\n    } // static checkNoOfBombsParam(noOfBombs, msgBegin = 'FieldClass constructor: '){\r\n\r\n\r\n    // the 'rows', 'cols' and 'noOfBombs' values for the field\r\n    // remains the same - they are persistent\r\n    // but the new 'cells' 2d-array of 'CellClass' objects is created\r\n    // with default values: hasBomb: false, cellState: 'closed'\r\n    // and filled with initial count of 'noOfBombs' in random places,\r\n    // and the 'bombsAround' value for every cell is calculated\r\n    resetField() {\r\n        this.arr = this.initArr(CellClass, false, 'closed');\r\n\r\n        this.fillWithBombs(this.noOfBombs);\r\n        this.calculateBombsAroundAllCells();\r\n    } // resetField() {\r\n\r\n\r\n    // count number of 'cells' in the 'field' array\r\n    // with 'bomb' set to 'true'\r\n    countBombs() {\r\n        if (!this.arr) return 0;\r\n\r\n        let count = 0;\r\n        for (let i = 0; i < this.rows; i++) {\r\n            for (let j = 0; j < this.cols; j++) {\r\n                if (this.arr[i][j].bomb === true) {\r\n                    count++;\r\n                }\r\n            } // for (let j...)\r\n        } // for (let i...)\r\n\r\n        return count;\r\n    }; // const countBombs () {\r\n\r\n\r\n    // place randomly 'noOfBombs' somewhere on the 'field'\r\n    fillWithBombs(noOfBombs) {\r\n        if (!this.arr || !Number.isSafeInteger(noOfBombs)) return false;\r\n        if (noOfBombs < 1 || noOfBombs > this.rows * this.cols) return false;\r\n\r\n        // 'while' loop instead of 'for' to maintain cases,\r\n        // when 'random' hits the same cell multiple times\r\n        while (this.countBombs() < noOfBombs) {\r\n            let r = Math.floor(Math.random() * this.rows);\r\n            let c = Math.floor(Math.random() * this.cols);\r\n            this.arr[r][c].bomb = true;\r\n        }\r\n        return true;\r\n    }; // fillWithBombs (noOfBombs) {\r\n\r\n\r\n    // for the cell[row][col] count the number\r\n    // of 'bombs' in the neighborhood\r\n    countBombsAround(row, col) {\r\n        if (!this.arr) return 0;\r\n        if (!this.isRowColInRange(row, col)) return 0;\r\n\r\n        let cellsAroundIndexes = this.adjacency8IndexesList(row, col, false);\r\n        if (!cellsAroundIndexes || cellsAroundIndexes.length === 0) return 0;\r\n\r\n        // the 'cellsAroundIndexes' (if its not empty) entries are 2-element sub-arrays: [r,c]\r\n        // with indexes of cells adjacent to that one located at [row][col]\r\n        // therefore we can destructure that sub-arrays\r\n        // the 'length' of filtered 'cellsAroundIndexes' array\r\n        // should be equal (and it is, I hope) to number of bombs in the near of arr[row][col]\r\n        return cellsAroundIndexes.filter((idx) => {\r\n            const [r, c] = idx;\r\n            return this.arr[r][c].bomb; // 'bomb' is already of 'boolean' type\r\n        }).length;\r\n    } // countBombsAround(row, col) {\r\n\r\n\r\n    // update 'bombsAround' property for all cells in the field\r\n    calculateBombsAroundAllCells() {\r\n        if (!this.arr) return;\r\n        for (let r = 0; r < this.rows; r++) {\r\n            for (let c = 0; c < this.cols; c++) {\r\n                this.arr[r][c].bombsAround = this.countBombsAround(r, c);\r\n            } // for (let c...)\r\n        } // for (let r...)\r\n    } //calculateBombsAroundAllCells() {\r\n\r\n\r\n    isWinConditionSatisfied() {\r\n        if (!this.arr) return false;\r\n\r\n        let markedCellsWithBombsCounter = 0;\r\n\r\n        this.arr.forEach((row) => {\r\n            row.forEach((cell) => {\r\n                if (cell && cell.bomb && cell.state === 'marked') {\r\n                    markedCellsWithBombsCounter++;\r\n                }\r\n            })\r\n        });\r\n\r\n        return markedCellsWithBombsCounter === GameConst.noOfBombs;\r\n    } // isWinConditionSatisfied() {\r\n\r\n\r\n    // count number of cells in the field with given 'state'\r\n    // possible state values: cellStates = ['closed', 'open', 'marked'];\r\n    countCellsWithState(state) {\r\n        if (!this.arr) return 0;\r\n        if (!state || !cellStates.includes(state)) return 0;\r\n\r\n        let count = 0;\r\n        for (let r = 0; r < this.rows; r++) {\r\n            for (let c = 0; c < this.cols; c++) {\r\n                if (this.arr[r][c].state === state) {\r\n                    count++;\r\n                }\r\n            } // for (let j...)\r\n        } // for (let i...)\r\n\r\n        return count;\r\n    } // countCellsWithState(state){\r\n\r\n} // class FieldClass {\r\n\r\n\r\nexport default FieldClass;\r\n\r\n","\r\nclass Arr2dClass {\r\n\r\n    // creates new 2d-array[rows][cols] of 'new elementClass(...elementClassArgs)' elements\r\n    // requires 'rows' and 'cols' to be positive integers\r\n    // 'elementClass' is optional, but when provided, should be a function (e.g. some class name)\r\n    // 'elementClassArgs' are not checked - just passed to the 'elementClass' function\r\n    constructor(rows, cols, elementClass, ...elementClassArgs) {\r\n        // just for debug purposes\r\n        // console.log('Arr2dClass: ', rows, cols, elementClass, elementClassArgs);\r\n\r\n        // check if the constructor war properly called\r\n        if (new.target === undefined)\r\n            throw new Error(\"Arr2dClass constructor: not called using the 'new' operator as it should be.\");\r\n\r\n        Arr2dClass.checkRowsColsParams(rows, cols);\r\n        Arr2dClass.checkElementClassParam(elementClass);\r\n\r\n        this.rows = rows;\r\n        this.cols = cols;\r\n\r\n        //initializes 'this.arr' with 2d-array of 'elementClass(...elementClassArgs)'\r\n        this.arr = this.initArr(elementClass, ...elementClassArgs);\r\n\r\n    } // constructor(rows, cols, elementClass, ...elementClassArgs) {\r\n\r\n\r\n    // throws a TypeError when passed args are not numeric integer values\r\n    // throws a RangeError when passed args are not positive integer values\r\n    static checkRowsColsParams(rows, cols, msgBegin = 'Arr2dClass constructor: ') {\r\n        // check the presence of mandatory constructor parameters\r\n        if (!Number.isSafeInteger(rows) || !Number.isSafeInteger(cols))\r\n            throw new TypeError(`${msgBegin}You have to provide 2 positive integer arguments to create new Arr2dClass object.`);\r\n\r\n        // we want to create only non-degenerated 2d-arrays\r\n        // ok, '1x1' may not be very impressive one, but is acceptable\r\n        if (rows <= 0 || cols <= 0)\r\n            throw new RangeError(`${msgBegin}You have to provide 2 positive integer arguments to create new Arr2dClass object.`);\r\n\r\n        return true;\r\n    } // static checkRowsColsParams(rows, cols, msgBegin) {\r\n\r\n\r\n    // the 'elementClass', when provided, should be a function - e.g. some class constructor\r\n    // because its purpose is to create new Object - the Arr2dClass element\r\n    // throws a TypeError, when elementClass is defined, but not a function\r\n    static checkElementClassParam(elementClass, msgBegin = 'Arr2dClass constructor: ') {\r\n        if (elementClass && typeof elementClass !== \"function\")\r\n            throw new TypeError(`${msgBegin}the third argument, when provided, should be the Arr2dClass element class name.`);\r\n\r\n        return true;\r\n    } // static checkElementClassParam(elementClass, msgBegin) {\r\n\r\n\r\n    // preserves 'rows' and 'cols'\r\n    // initializes 'this.arr' with new 2d-array\r\n    // possibly of new 'elementClass' with new 'elementClassArgs'\r\n    // when 'elementClass' is undefined of not a function,\r\n    // fills 'this.elements' 2d-array[rows][cols] with empty objects {}\r\n    initArr(elementClass, ...elementClassArgs) {\r\n        // the 'elementClass', when defined, should be a function\r\n        // if it isn't - throw 'TypeError'\r\n        Arr2dClass.checkElementClassParam(elementClass);\r\n\r\n        return new Array(this.rows).fill().map(\r\n            // 'v1' undefined - see 'fill()', but required to access the 'r' arg - index - 'row' number\r\n            (v1, r) => {\r\n                // just for debug purposes\r\n                // console.log('r: ', r);\r\n                return Array(this.cols).fill().map(\r\n                    // 'v2' undefined - see 'fill()', but required to access the 'c' arg - index - 'col' number\r\n                    (v2, c) => {\r\n                        // just for debug purposes\r\n                        // console.log('c: ', c);\r\n\r\n                        let elem;\r\n\r\n                        // we want the 'arr' elements at different locations \r\n                        // e.g. [0][2] and [3][1] to be DIFFERENT objects!!! \r\n                        // even if they will be empty objects\r\n                        // the simple 'return {}' does NOT guarantee that\r\n                        // so we try different approaches\r\n                        if (elementClass) {\r\n                            elem = new elementClass(...elementClassArgs);\r\n                        } else {\r\n                            // it DOES NOT work (returns references to THE SAME object for the whole row)\r\n                            // return {};\r\n\r\n                            // but IT WORKS (entering local variable with {} value\r\n                            elem = {};\r\n\r\n                            // other approaches which WORK TOO:\r\n                            // elem = Object.create({});\r\n                            // elem = new Object({});\r\n                            // elem = new {};\r\n                        }\r\n                        // just for debug purposes\r\n                        // console.log(`map for arr[${r}][${c}] returns: ${elem}`);\r\n\r\n                        return elem;\r\n                    }) // (v2,c) => {\r\n            }); // (v1,r) => {\r\n    } // initArr(elementClass, ...elementClassArgs) {\r\n\r\n\r\n    isRowInRange(row) {\r\n        if (!Number.isSafeInteger(row)) return false;\r\n        return !(row < 0 || row >= this.rows);\r\n    } // isRowInRange(row) {\r\n\r\n\r\n    isColInRange(col) {\r\n        if (!Number.isSafeInteger(col)) return false;\r\n        return !(col < 0 || col >= this.cols);\r\n    } // isColInRange(col) {\r\n\r\n\r\n    isRowColInRange(row, col) {\r\n        return this.isRowInRange(row) && this.isColInRange(col);\r\n    }\r\n\r\n\r\n    // adds the 'elem' to the end of the array 'arr'\r\n    // IF IT IS NOT ALREADY INCLUDED IN IT\r\n    // (the 'elem' may be anything - the nested array, too)\r\n    // returns new length of the 'arr' array\r\n    // returns 0 (zero) if 'arr' is not array \r\n    // or if 'arr' or 'elem' are null or undefined\r\n    addIfNotIncluded(arr, elem) {\r\n        if (!arr || !elem) return 0;\r\n        if (!Array.isArray(arr)) return 0;\r\n\r\n        let elemJson = JSON.stringify(elem);\r\n\r\n        // when the 'elem' is already included in the 'arr' array\r\n        // don't add it again\r\n        if (!JSON.stringify(arr).includes(elemJson)) {\r\n            // let's create the deep copy of 'elem'\r\n            arr.push(JSON.parse(elemJson));\r\n        }\r\n\r\n        return arr.length;\r\n    }\r\n\r\n    \r\n    // returns the list of indexes of 4 elements adjacent to the one located at [row][col]\r\n    // for adjacency checking the NSWE - north, south, west, east directions are taken into account\r\n    // that list may have from 0 to 4 (both ends included) entries\r\n    // depending on the size of 'this.arr' and the 'wrapIndexes' parameter\r\n    adjacency4IndexesList(row, col, wrapIndexes = false) {\r\n        if (!this.isRowColInRange(row, col)) return [];\r\n\r\n        //trivial case - no neighbors\r\n        if (this.rows === 1 && this.cols === 1) return [];\r\n\r\n        // just a little trick: \r\n        // we add the \"elem's\" indexes to the list as the first entry\r\n        // to avoid adding them later and at the end we'll remove them \r\n        // to return only the neighbors' indexes\r\n        let indexes = [[row, col]];\r\n\r\n        // N (north) neighbor\r\n        if (this.isRowInRange(row - 1)) {\r\n            this.addIfNotIncluded(indexes, [row - 1, col])\r\n        } else if (wrapIndexes) {\r\n            this.addIfNotIncluded(indexes, [this.rows - 1, col])\r\n        }\r\n\r\n        // S (south) neighbor\r\n        if (this.isRowInRange(row + 1)) {\r\n            this.addIfNotIncluded(indexes, [row + 1, col])\r\n        } else if (wrapIndexes) {\r\n            this.addIfNotIncluded(indexes, [0, col])\r\n        }\r\n\r\n        // W (west) neighbor\r\n        if (this.isColInRange(col - 1)) {\r\n            this.addIfNotIncluded(indexes, [row, col - 1])\r\n        } else if (wrapIndexes) {\r\n            this.addIfNotIncluded(indexes, [row, this.cols - 1])\r\n        }\r\n\r\n        // E (east) neighbor\r\n        if (this.isColInRange(col + 1)) {\r\n            this.addIfNotIncluded(indexes, [row, col + 1])\r\n        } else if (wrapIndexes) {\r\n            this.addIfNotIncluded(indexes, [row, 0])\r\n        }\r\n\r\n        // remove the checked element's indexes\r\n        // from the list of its neighbors indexes\r\n        indexes.shift();\r\n\r\n        return indexes.sort();\r\n    } // adjacency4IndexesList(row, col, wrapIndexes = false) {\r\n\r\n\r\n    // returns the list of indexes of elements adjacent to the one located at [row][col]\r\n    // for adjacency checking all 8 directions (N NW NE W E SW S SE) are taken into account\r\n    // that list may have from 0 to 8 (both ends included) entries\r\n    // depending on the size of 'this.arr' and the 'wrapIndexes' parameter\r\n    adjacency8IndexesList(row, col, wrapIndexes = false) {\r\n        if (!this.isRowInRange(row) || !this.isColInRange(col)) return [];\r\n\r\n        //trivial case - no neighbors\r\n        if (this.rows === 1 && this.cols === 1) return [];\r\n\r\n        // we already have the method which adds NSWE indexes :)\r\n        let indexes = this.adjacency4IndexesList(row, col, wrapIndexes);\r\n\r\n        // lets repeat the trick from the 'adjacency4IndexesList'\r\n        indexes.unshift([row, col]);\r\n\r\n        // TODO: add NW, NE, SW, SE neighbors\r\n\r\n        if (this.isRowInRange(row - 1)) {\r\n            if (this.isColInRange(col - 1)) {\r\n                this.addIfNotIncluded(indexes, [row - 1, col - 1]);\r\n            } else if (wrapIndexes) {\r\n                this.addIfNotIncluded(indexes, [row - 1, this.cols - 1]);\r\n            }\r\n\r\n            if (this.isColInRange(col + 1)) {\r\n                this.addIfNotIncluded(indexes, [row - 1, col + 1]);\r\n            } else if (wrapIndexes) {\r\n                this.addIfNotIncluded(indexes, [row - 1, 0]);\r\n            }\r\n        } else if (wrapIndexes){\r\n            if (this.isColInRange(col - 1)) {\r\n                this.addIfNotIncluded(indexes, [this.rows - 1, col - 1]);\r\n            } else { // 'wrapIndexes' is 'true' here -> there's no need to check it\r\n                this.addIfNotIncluded(indexes, [this.rows - 1, this.cols - 1]);\r\n            }\r\n\r\n            if (this.isColInRange(col + 1)) {\r\n                this.addIfNotIncluded(indexes, [this.rows - 1, col + 1]);\r\n            } else { // 'wrapIndexes' is 'true' here -> there's no need to check it\r\n                this.addIfNotIncluded(indexes, [this.rows - 1, 0]);\r\n            }\r\n        }\r\n\r\n        if (this.isRowInRange(row + 1)) {\r\n            if (this.isColInRange(col - 1)) {\r\n                this.addIfNotIncluded(indexes, [row + 1, col - 1]);\r\n            } else if (wrapIndexes) {\r\n                this.addIfNotIncluded(indexes, [row + 1, this.cols - 1]);\r\n            }\r\n\r\n            if (this.isColInRange(col + 1)) {\r\n                this.addIfNotIncluded(indexes, [row + 1, col + 1]);\r\n            } else if (wrapIndexes) {\r\n                this.addIfNotIncluded(indexes, [row + 1, 0]);\r\n            }\r\n        } else if (wrapIndexes) {\r\n            if (this.isColInRange(col - 1)) {\r\n                this.addIfNotIncluded(indexes, [0, col - 1]);\r\n            } else { // 'wrapIndexes' is 'true' here -> there's no need to check it\r\n                this.addIfNotIncluded(indexes, [0, this.cols - 1]);\r\n            }\r\n\r\n            if (this.isColInRange(col + 1)) {\r\n                this.addIfNotIncluded(indexes, [0, col + 1]);\r\n            } else { // 'wrapIndexes' is 'true' here -> there's no need to check it\r\n                this.addIfNotIncluded(indexes, [0, 0]);\r\n            }\r\n        }\r\n\r\n        // remove the checked element's indexes\r\n        // from the list of its neighbors indexes\r\n        indexes.shift();\r\n\r\n        return indexes.sort();\r\n    } // adjacency8IndexesList(row, col, wrapIndexes = false) {\r\n\r\n} // class Arr2dClass\r\n\r\nexport default Arr2dClass;\r\n","export default __webpack_public_path__ + \"static/media/bomb.50cb791f.svg\";","import React from \"react\";\r\nimport './styles/LogoArea.css';\r\nimport logo from \"./images/bomb.svg\";\r\n\r\nfunction LogoArea() {\r\n    return (\r\n        <footer className=\"logoArea\">\r\n            <p>&nbsp;&nbsp;&nbsp;M I N E<br />SWEEPER</p>\r\n            <img src={logo} className=\"appLogo\" alt=\"logo\" />\r\n        </footer>\r\n    ); /*return() of function LogoArea()*/\r\n}/* function LogoArea()*/\r\n\r\nexport default LogoArea;\r\n","import React, {useState, useEffect} from \"react\";\r\nimport GameConst from \"./GameConst\";\r\nimport ControlPanel from './ControlPanel';\r\nimport Field from \"./Field\";\r\nimport FieldClass from \"./FieldClass\";\r\nimport LogoArea from \"./LogoArea\";\r\nimport './styles/Game.css';\r\n\r\n\r\nconst myField = new FieldClass(GameConst.rows, GameConst.cols, GameConst.noOfBombs);\r\nlet intervalID = null;\r\n\r\nconst Game = () => {\r\n\r\n    const [gameState, setGameState] = useState('init');\r\n\r\n    const [markedCellsCount, setMarkedCellsCount] = useState(0);\r\n    const [secondsElapsed, setSecondsElapsed] = useState(0);\r\n\r\n    let myFieldArrStringify = JSON.stringify(myField.arr);\r\n\r\n    // to properly handle the 'state', we need the deep copy of 'myField.arr'\r\n    // (the deeper one then the spread/'...' operator provides)\r\n    const [cellArr, setCellArr] = useState(JSON.parse(myFieldArrStringify));\r\n    // console.log('Game begin');\r\n    // console.log(myFieldArrStringify);\r\n\r\n\r\n    useEffect(() => {\r\n        if (gameState === 'init') {\r\n            // the 'init' state is at the very beginning and after 'resetBtn' click\r\n            // create new field of cells with bombs\r\n            myField.resetField();\r\n            setMarkedCellsCount(0);\r\n            setSecondsElapsed(0);\r\n            setCellArr(JSON.parse(JSON.stringify(myField.arr)));\r\n            if (intervalID) {\r\n                clearInterval(intervalID);\r\n                intervalID = null;\r\n            }\r\n        } else if (gameState === 'action') {\r\n            intervalID = setInterval(updateSecondsElapsed, 1000);\r\n        } else if (gameState === 'defeat') {\r\n            if (intervalID) {\r\n                clearInterval(intervalID);\r\n                intervalID = null;\r\n            }\r\n        } else if (gameState === 'victory') {\r\n            if (intervalID) {\r\n                clearInterval(intervalID);\r\n                intervalID = null;\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            if (intervalID) {\r\n                clearInterval(intervalID);\r\n                intervalID = null;\r\n            }\r\n        }\r\n    }, [gameState]);    // useEffect(() => {\r\n\r\n\r\n    const updateSecondsElapsed = () => {\r\n        setSecondsElapsed((prevSecondsElapsed) => prevSecondsElapsed + 1)\r\n    };\r\n\r\n    const handleCellClicks = (e) => {\r\n        // console.log(e.target);\r\n        // console.log(e.target.dataset);\r\n        let row = Number(e.target.dataset.r);\r\n        let col = Number(e.target.dataset.c);\r\n        let cellArrStateShouldUpdate = false;\r\n\r\n        // console.log(JSON.stringify(myField.arr[row][col]));\r\n\r\n        if (gameState === 'init' || gameState === 'action') {\r\n            // first click on a cell -> let's start the game...\r\n            if (gameState === 'init') {\r\n                setGameState('action');\r\n            }\r\n\r\n            // handle 'left mouse button' - 'onClick' event\r\n            if (e.which === 1 || e.button === 0) {\r\n                // console.log('Left mouse button at ' + e.clientX + 'x' + e.clientY);\r\n                if (cellArr[row][col].state !== 'open') {\r\n                    // console.log('[',row,',',col,']: !open -> open');\r\n                    myField.arr[row][col].state = 'open';\r\n\r\n                    // oopppssss.. you've left-clicked\r\n                    // non-open cell with bomb :(\r\n                    if (cellArr[row][col].bomb) {\r\n                        setGameState('defeat');\r\n                    }\r\n\r\n                    cellArrStateShouldUpdate = true;\r\n                }\r\n            } // end of handle 'left mouse button'\r\n\r\n            // handle 'right mouse button' - 'onContextMenu' event\r\n            if (e.which === 3 || e.button === 2) {\r\n                // console.log('Right mouse button at ' + e.clientX + 'x' + e.clientY);\r\n                if (cellArr[row][col].state === 'closed') {\r\n                    // console.log('[',row,',',col,']: closed -> marked');\r\n                    myField.arr[row][col].state = 'marked';\r\n                    setMarkedCellsCount(markedCellsCount + 1);\r\n                    if (myField.isWinConditionSatisfied()){\r\n                        setGameState('victory');\r\n                    }\r\n\r\n                    cellArrStateShouldUpdate = true;\r\n                } else if (cellArr[row][col].state === 'marked') {\r\n                    // console.log('[',row,',',col,']: marked -> closed');\r\n                    myField.arr[row][col].state = 'closed';\r\n                    setMarkedCellsCount(markedCellsCount - 1);\r\n                    if (myField.isWinConditionSatisfied()){\r\n                        setGameState('victory');\r\n                    }\r\n\r\n                    cellArrStateShouldUpdate = true;\r\n                }\r\n            } // end of handle 'right mouse button'\r\n        } // if (gameState === 'init' || gameState === 'action') {\r\n        if (cellArrStateShouldUpdate) setCellArr(JSON.parse(JSON.stringify(myField.arr)));\r\n    } // const handleCellClicks = (e) => {\r\n\r\n\r\n    const handleResetBtnClick = (e) => {\r\n        // handle 'left mouse button' - 'onClick' event\r\n        if (e.which === 1 || e.button === 0) {\r\n            setGameState('init');\r\n        }\r\n    } // const handleResetBtnClick = (e) => {\r\n\r\n\r\n    return (\r\n        <div className=\"minesweepergame\"\r\n             onContextMenu={(e) => e.preventDefault()}\r\n        >\r\n            <ControlPanel\r\n                marked={markedCellsCount}\r\n                timeElapsed={secondsElapsed}\r\n                myResetBtnClickHandler={handleResetBtnClick}\r\n            />\r\n            <Field\r\n                cellArr={cellArr}\r\n                gameState={gameState}\r\n                myCellClickHandler={handleCellClicks}\r\n            />\r\n            <LogoArea/>\r\n        </div>\r\n    ); // return() of function Game()\r\n}; // Game()\r\n\r\nexport default Game;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from \"./Game\";\nimport './styles/index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}